*latexsupport.txt*               LaTeX Support                     Oct 12 2017

LaTeX Support                                     *latex-support* *latexsupport*

                             Plug-in version 1.3alpha
                        for Vim version 7.0 and above
                   Wolfgang Mehner <wolfgang-mehner@web.de>
                      Fritz Mehner <mehner.fritz@web.de>

LaTeX-IDE for Vim/gVim. It is written to considerably speed up typesetting a
document in a consistent style. This is done by inserting complete statements,
idioms, code snippets, and comments. Compiling and viewing a document, format
conversion and running make can be done with a few keystrokes.

==============================================================================
0.  TABLE OF CONTENTS                                  *latexsupport-contents*
==============================================================================

 1.    Introduction                           |latexsupport-introduction|
 2.    Usage                                  |latexsupport-usage|
 2.1    Comments                              |latexsupport-usage-comments|
 2.1.1   End-of-Line Comments                 |latexsupport-usage-comments-eol|
 2.1.2   Toggle Comment Lines                 |latexsupport-usage-comments-lines|
 2.1.3   Further Comments                     |latexsupport-usage-comments-other|
 2.2    Text, Math, ..                        |latexsupport-usage-templates|
 2.3    Code Snippets                         |latexsupport-usage-snippets|
 2.4    Wizards                               |latexsupport-usage-wizard|
 2.5    Running External Tools                |latexsupport-usage-run|
 2.5.1   Tool Overview                        |latexsupport-usage-tools|
 2.5.2   Typesetters                          |latexsupport-usage-typesetter|
 2.5.3   Additional Maps                      |latexsupport-usage-add-maps|
 2.5.4   Using Quickfix                       |latexsupport-usage-qf|
 2.6    Hardcopy                              |latexsupport-usage-hardcopy|
 2.7    Help                                  |latexsupport-usage-help|
 2.8    Toolbox                               |latexsupport-usage-toolbox|
 3.    Templates                              |latexsupport-templates|
 3.1    Introduction                          |latexsupport-templates-introduction|
 3.2    Jump Tags                             |latexsupport-templates-jump-tags|
 3.3    Split Tags                            |latexsupport-templates-split-tags|
 3.4    Macros                                |latexsupport-templates-macros|
 3.5    Template Files                        |latexsupport-templates-files|
 3.6    Template Libraries                    |latexsupport-templates-libs|

4.     Customization                          |latexsupport-customization|
4.1    Files                                  |latexsupport-custom-files|
4.2    Global Variables                       |latexsupport-custom-variables|
4.3    The Root Menu                          |latexsupport-custom-root|
4.4    System-wide installation               |latexsupport-system-wide|

5.     Template Files and Tags                |latexsupport-old-templ|
5.1    Template Files                         |latexsupport-old-templ-files|
5.2    Macros                                 |latexsupport-old-templ-macros|
5.2.1  Formating Date and Time                |latexsupport-old-templ-date|
5.3    Templates                              |latexsupport-old-templ-names|
5.3.1  Template definition                    |latexsupport-old-templ-definition|
5.3.2  The jump tags <+text+> etc.            |latexsupport-old-templ-jumptags|
5.3.3  Command Ctrl-j                         |latexsupport-Ctrl-j|
5.4    File Skeletons                         |latexsupport-file-skeleton|

6.     LaTeX Dictionary                       |latexsupport-dictionary|

 A.    Overview of Mappings                   |latexsupport-mappings|
 B.    Troubleshooting - Known Issues         |latexsupport-troubleshooting|
 C.    Release Notes - Change Log             |latexsupport-release-notes|

==============================================================================
1.  INTRODUCTION                                   *latexsupport-introduction*
==============================================================================

After the first LaTeX file (*.tex) has been opened, the menu "LaTeX" appears
in the menu bar. It holds entries for all the templates (such as
"Text->environment" or "Math->equation"), as well as some other functionality.
The letters on the right name maps, which can also be used to access all the
capabilities. See |latexsupport-mappings| for an overview.
The menus are also created if a GUI is not running. They can be used via >
  :emenu LaTeX.
(Use the arrow keys for navigation, <Enter> to select an entry and <TAB> for
auto completion.)

The features of the plug-in are:
- Turn code lines into comments and vice versa.
    |latexsupport-usage-comments-lines|
- Open the online documentation for a given function.
    |latexsupport-usage-help|
- Run the typesetter. |latexsupport-usage-run|
- Change the typesetter on-the-fly. |latexsupport-usage-run|
- Invoke lacheck. |latexsupport-usage-run|
- Run makeglossaries, makeindex, and BibTeX. |latexsupport-usage-run|
- Manage code snippets. |latexsupport-usage-snippets|
- An extendible template library. |latexsupport-templates|
- Make integration. |latexsupport-usage-toolbox|

The usage of most features is described in the chapter |latexsupport-usage|.
The chapter |latexsupport-templates| gives a short introduction to the template
system. The LaTeX executables and some other features may require some
configuration, which is documented in the chapter |luasupport-configuration|.
How to do a system-wide installation is outlined in |luasupport-system-wide|.

The template system comes with its own documentation, which mainly aims at the
advanced user (see |templatesupport.txt|).

==============================================================================
2.  USAGE                                                 *latexsupport-usage*
==============================================================================

Features are accessible via menu entries and maps. Most maps are preceded by a
mapleader. The leader is an acute accent "Â´", if the standard configuration is
used. (The default mapleader in Vim, the backslash "\", is not an appropriate
choice for typesetting in LaTeX.)

If the root menu 'LaTeX' is not visible you also can load it with the item
"Load LaTeX Support" from the "Tools" menu. The item "Unload LaTeX Support"
can be used to unload the LaTeX root menu.
(Compare |latexsupport-custom-root|.)

------------------------------------------------------------------------------
2.1  COMMENTS                                    *latexsupport-usage-comments*
------------------------------------------------------------------------------

Besides the templates, there is some other functionality provided in the menu
"Comments".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  add end-of-line comments   Comments.end-of-line comment   <LocalLeader>cl
  adjust end-of-line com.    Comments.adjust end-of-line c. <LocalLeader>cj
  set end-of-line column     Comments.set end-of-line col.  <LocalLeader>cs

  code to comment            Comments.comment               <LocalLeader>cc
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------

2.1.1  End-of-Line Comments                  *latexsupport-usage-comments-eol*

In NORMAL MODE the menu item 'end-of-line comments' will append a comment to
the current line. In VISUAL MODE this item will append aligned comments to all
marked lines. Marking the 3 lines
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}
 \begin{flushleft}
 \large{\textbf{Ex Commands}}\\[1.0ex]
<
and choosing 'end-of-line comments' will yield
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % |
 \begin{flushleft}                               %
 \large{\textbf{Ex Commands}}\\[1.0ex]           %
<
The cursor position above is marked by '|'. Empty lines will be ignored.

The default starting column is 49 ( = (multiple of 2,4, or 8) + 1 ).  This can
be changed by setting a global variable in the file .vimrc , e.g. : >
  let g:Latex_LineEndCommColDefault = 65
The starting column can also be set by the menu item "Comments->adjust
end-of-line com.". Just position the cursor in an arbitrary column (normal
mode; the column number is shown in the Vim status line) and choose this menu
item. This setting is done individually for each buffer.
If the cursor was at the end of a line you will be asked for a column number
because this position is most likely not the desired starting column.

------------------------------------------------------------------------------

After some copy/paste/change actions comments may be misaligned:
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % comment 1
 \begin{flushleft}                              % comment 2
 \large{\textbf{Ex Commands}}\\[1.0ex]              % comment 3
<
Realignment can be achieved with the menu item 'adjust end-of-line com.' In
normal mode the comment (if any) in the current line will be aligned to the
end-of-line comment column (see above) if possible. In visual mode the
comments in the marked block will be aligned:
>
 \fbox{\begin{minipage}[t][30mm][l]{73mm}        % comment 1
 \begin{flushleft}                               % comment 2
 \large{\textbf{Ex Commands}}\\[1.0ex]           % comment 3
<
------------------------------------------------------------------------------

2.1.2  Toggle Comment Lines                *latexsupport-usage-comments-lines*

The comment sign % can be inserted or removed at the beginning of the current
line or for a marked block. A single line does not need to be marked.

For a marked block containing only lines with a '%' in the first column (and
possibly empty lines) all lines will be uncommented. A marked block containing
one or more nonempty lines without a '%' in the first column will be changed
into a comment block.

------------------------------------------------------------------------------

2.1.3  Further Comments                    *latexsupport-usage-comments-other*

Frame comments and a file prolog are read as templates from the appropriate
files (see |latexsupport-templates|).

------------------------------------------------------------------------------
2.2  TEXT, MATH, ..                             *latexsupport-usage-templates*
------------------------------------------------------------------------------

The 'Text' and 'Math' menus contain the most frequently used statements. The
menu entries insert some code into the buffer. Almost all menu entries also
have a map, making the same behavior accessible more quickly. E.g. the menu
entry "Text->environment" has the map Â´e .

Many statements behave differently depending on the mode.

NORMAL MODE, INSERT MODE
-------------------------------

If you choose "Text->environment" you will be prompted for the name of an
environment. Type "center" (try tab-completion), then hit <Enter>. An empty
statement will be inserted:
>
  \begin{center}
  |
  \end{center}
<
VISUAL MODE
-------------------------------

Select the following lines:
>
  \textbf{Read this!}
  \textit(Written by my dog.)
<
If you now use the menu entry "Text->environment", the lines will be surrounded
by the statement:
>
  \begin{center}
  \textbf{Read this!}
  \textit(Written by my dog.)
  \end{center}
<
This "split mode" works for many of the menu entries. With the word 'Length'
selected, the map Â´msq or the menu entry "Math->sqrt" will surround it with
the sqrt-statement:
>
  ... \sqrt[|]{Length} ...
<
Lots of submenus are only associated with one map. E.g. all the entries in
"Math->spaces->..." can be accessed via the map Â´msp . You will be prompted
for your choice. Use tab-expansion to display the choices and the arrow keys
to select an item:
>
  large \;  medium \:  qquad  quad  small \,
  choose : large \\;
>
------------------------------------------------------------------------------

The 'BibTeX' menu contains frequently used BibTeX statements. Complete
BibTeX-entries will be inserted from the corresponding template, e.g.
>
  @article{,
    author        = {},
    title         = {},
    journal       = {},
    year          = ,
    volume        = {},
    number        = {},
    pages         = {},
    month         = {},
    note          = {},
  }
<
All entries in the shipped template library list the required fields first, up
to the field "year", then the optional ones "volume", "number", ...

------------------------------------------------------------------------------
2.3  CODE SNIPPETS                               *latexsupport-usage-snippets*
------------------------------------------------------------------------------

Useful code snippets can be kept in a central place. This way, they can
quickly be inserted into the code, using "Snippets -> read code snippet".
New snippets can be created from existing lines of code by selecting them in
visual mode and saving them using "Snippets -> write code snippet".

Code snippets are kept in a directory which can be changed using the setting
|g:Latex_CodeSnippets|.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  insert code snippet        Snippets.read code snippet     <LocalLeader>nr
  view code snippet          Snippets.view code snippet     <LocalLeader>nv
  create code snippet        Snippets.write code snippet    <LocalLeader>nw
  edit code snippet          Snippets.edit code snippet     <LocalLeader>ne
 ----------------------------------------------------------------------------

Creating a new snippet
----------------------
When nothing is marked, "write code snippet" will write the whole buffer to a
snippet file. Otherwise the marked area will be written to a file.

Insert a snippet
----------------
Select the appropriate file from the snippet directory ("read code snippet").
The inserted lines will be indented.

Indentation / no indentation
----------------------------
Code snippets are normally indented after insertion. To suppress indentation
add the file extension "ni" or "noindent" to the snippet file name, e.g.
>
  xy.tex.noindent
<
There are a few snippets shipped with this plug-in. These are examples, add
your own.

------------------------------------------------------------------------------
2.4  WIZARDS                                       *latexsupport-usage-wizard*
------------------------------------------------------------------------------

This section containing less frequently used statements which have usually
several lines, e.g. listings, tables, or figures. Many of them are implemented
as templates and can thus be adapted by the user.

Two of the wizards, "Wizard->tables->tabbing" and "Wizard->tables->tabular",
prompt the user for the number of rows and columns to insert. The statements
are still inserted using the template library, but changing these templates
requires some caution. (See the comments in the template file "latex-support/
templates/wizard.templates" for instructions.)

The menu item 'ligatures' lets you find double and triple ligatures and split
them if appropriate.

------------------------------------------------------------------------------
2.5  RUNNING EXTERNAL TOOLS                           *latexsupport-usage-run*
------------------------------------------------------------------------------

External tools like the typesetters and BibTeX can be run with a keystroke.
(See Section |luasupport-config-executable| for the configuration.)

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  run the typesetter         Run.save + run typesetter      <LocalLeader>rr
  run lacheck                Run.save + run lacheck         <LocalLeader>rla
  set the main document      Run.set main document          <LocalLeader>rmd
  view errors from last BG   Run.view last errors           <LocalLeader>re

  open the resulting DVI     Run.View.DVI                   <LocalLeader>rdvi
  open the resulting PDF     Run.View.PDF                   <LocalLeader>rpdf
  open the resulting PS      Run.View.PS                    <LocalLeader>rps
  convert the result         Run.Convert.###->###           <LocalLeader>rc

	run makeglossaries         run makeglossaries             <LocalLeader>rmg
	run makeindex              run makeindex                  <LocalLeader>rmi
	run BibTeX                 run bibtex                     <LocalLeader>rbi

  change the typesetter      Run.choose typesetter          <LocalLeader>rt
  set the processing mode    Run.external processing        <LocalLeader>rp
 ----------------------------------------------------------------------------

The functionality is also available through ex-commands. These commands can
also be used to set different maps in the ftplugin.

  Command                        Explanation
 ----------------------------------------------------------------------------
  *:Latex* [<tex-file>]            run the typesetter
  *:LatexCheck* [<tex-file>]       run lacheck
  *:LatexMainDoc* [<tex-file>]     set the main tex document
  *:LatexErrors*                   view the errors from the last background job

  *:LatexTypesetter* [<typeset>]   change the typesetter
  *:LatexProcessing* [<mode>]      set the processing mode for external commands

  *:LatexBibtex* [<aux-file>]      run BibTeX
  *:LatexMakeglossaries* [<base>]  run makeglossaries
  *:LatexMakeindex* [<idx-file>]   run makeindex
  *:LatexView* ...                 view an external document
  *:LatexConvert* [<doc>]          convert a document
 ----------------------------------------------------------------------------

To run the typesetter for the tex file in the current buffer, use the map Â´rr ,
the menu entry "Run->save + run typesetter" or the ex-command |:Latex|. Using
the command, you can also run LaTeX for other files: >
  :Latex some_other_doc.tex
<
You can run the typesetter in the background (requires the |+job| feature).
Choose the processing mode via |:LatexProcessing|:  >
  :LatexProcessing background
Now you can continue working while your document is compiling. After the
typesetter finished a message is displayed. In case of errors, you can load
them into the |quickfix| buffer using: >
  :LatexErrors
<
When editing larger documents with included files, the facilities for
compiling documents become insufficient, since they try to run the external
tools for the file in the current buffer. You can set the main document via: >
  :LatexMainDoc <tex-file>
Now, when running the typesetter, the working directory will be changed before
compiling the main document.

------------------------------------------------------------------------------

2.5.1  Tool Overview                                *latexsupport-usage-tools*

When called without arguments, the external tools are called with default
arguments. If the main document has been set (|:LatexMainDoc|), the default
argument is derived from it. Otherwise, the default is derived from the name
of the current buffer. The default for viewing the document furthermore
depends on the typesetter.

The table shows the capabilities and defaults of each command. Assume you are
editing "myfile.tex" in the current buffer, then the defaults are as follows:

                               uses main   default from     uses background
  Command                      document    current buffer   processing
 ----------------------------------------------------------------------------
  :Latex                       yes         myfile.tex       yes (|+job|)
  :LatexCheck                  no          myfile.tex       no
  :LatexBibtex                             myfile
  :LatexMakeglossaries                     myfile
  :LatexMakeindex                          myfile.idx
  :LatexView                               myfile.dvi       always (forked)
    (with typesetter tex or latex)
  :LatexView                               myfile.pdf       always (forked)
    (with typesetter pdf[la]tex or lua[la]tex)
  :LatexConvert                            myfile.FROM      yes (|+job|)
    (the default name depends on the conversion operation: FROM-TO)
 ----------------------------------------------------------------------------

Some commands use background processing if it has been set as the processing
mode. The viewers are always run in the background, since that are forked and
do not rely on the |+job| feature.

------------------------------------------------------------------------------

2.5.2  Typesetters                             *latexsupport-usage-typesetter*

The default typesetter is 'pdflatex'. This can be changed by assigning one of
the values 'tex', 'latex', 'pdftex', 'luatex', and 'lualatex' to the variable
|g:Latex_Typesetter| in your .vimrc file: >
  let g:Latex_Typesetter = 'latex'
The typesetter can be changes on-the-fly using: >
  :LatexTypesetter <typesetter>
The way the typesetters are called can be changed in the .vimrc file,
by using one of these configuration variables:
 |g:Latex_Latex|  |g:Latex_Pdflatex|  |g:Latex_Lualatex|
 |g:Latex_Tex|    |g:Latex_Pdftex|    |g:Latex_Luatex|
The predefined calls of the typesetters are: >
  <executable> -src-specials -file-line-error -interaction=nonstopmode
<
------------------------------------------------------------------------------

2.5.3  Additional Maps                           *latexsupport-usage-add-maps*

Additional maps can be defined by the user, using the ex-commands :Latex,
:LatexCheck, :LatexView, ...
To define the following function keys in normal, visual, and insert mode:

         F9   run typesetter
    CTRL-F9   run viewer

Add these lines to your Latex filetype plug-in: >

  nnoremap   <buffer>     <F9>        :Latex<CR>
  inoremap   <buffer>     <F9>   <Esc>:Latex<CR>
  vnoremap   <buffer>     <F9>   <Esc>:Latex<CR>
  nnoremap   <buffer>   <C-F9>        :LatexView<CR>
  inoremap   <buffer>   <C-F9>   <Esc>:LatexView<CR>
  vnoremap   <buffer>   <C-F9>   <Esc>:LatexView<CR>
<
------------------------------------------------------------------------------

2.5.4  Using Quickfix                                  *latexsupport-usage-qf*

Vim's QuickFix facility is described here: |quickfix.txt|. It offers a
convenient way to go through all the errors which a program like a compiler or
code checker has found in the code.

It is controlled by the commands:
- |:copen| and |:cclose|    : open or close the quickfix window
- |:cnext| and |:cprevious| : jump to the next previous error

The fastest way of using them is to put maps like this into your .vimrc file:
>
  noremap  <silent>  <F5>  :copen<CR>
  noremap  <silent>  <F6>  :cclose<CR>
  noremap  <silent>  <F7>  :cprevious<CR>
  noremap  <silent>  <F8>  :cnext<CR>
<
You can now use F5 and F6 to open and close the quickfix window and F7 and F8
to jump to the errors.
Compare the file 'customization.vimrc', see |latexsupport-custom-files|.

------------------------------------------------------------------------------
2.6  HARDCOPY                                    *latexsupport-usage-hardcopy*
------------------------------------------------------------------------------

The current buffer, or a range in it, can be quickly printed into a file,
using the menu entry "Run -> hardcopy to filename.ps".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  hardcopy to postscript     Run.hardcopy to ...            <LocalLeader>rh
 ----------------------------------------------------------------------------

The file will be put into the current working directory. If the user can not
write there, it is put into the home directory instead.

The printheader on top of each page can be set via |g:Latex_Printheader|.

------------------------------------------------------------------------------
2.7  HELP                                            *latexsupport-usage-help*
------------------------------------------------------------------------------

This submenu offers convenient access to various documentations.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  open English dictionary    Help.English                   <LocalLeader>he
  open texdoc                Help.texdoc                    <LocalLeader>ht
  open plug-in help          Help.help (LaTeX-support)      <LocalLeader>hp
 ----------------------------------------------------------------------------

The entry 'texdoc' starts texdoc for the word (package, command) under the
cursor. If there is no word under the cursor, you will be prompted for the
name of a package.

The entry 'English' opens an online dictionary for the word under the cursor.

The browser for opening the online documentation, or the English dictionary,
can be configured by setting a global variable in your ~/.vimrc (see
|g:Templates_InternetBrowserExec| and |g:Templates_InternetBrowserFlags|):
>
  let g:Templates_InternetBrowserExec = 'firefox'
<
------------------------------------------------------------------------------
2.8  TOOLBOX                                      *latexsupport-usage-toolbox*
------------------------------------------------------------------------------

More functionality, not directly related to LaTeX, is provided in the
so-called "Toolbox". By default, an integration for Make is inserted into the
toolbox. For the configuration, see |luasupport-config-toolbox|. The toolbox
comes with its own documentation, see |toolbox| and |toolbox-make|.

To switch the Tool Box off add the following line to the file .vimrc : >
  let g:Latex_UseToolbox = 'no'
<
The tool box for make provides a menu, and several ex-commands for controlling
running make. To switch the make tool box off add the following line to the
file .vimrc : >
  let g:Latex_UseTool_make = 'no'
The hotkeys for the make tool are can be defined in the filetype plug-in
'~/.vim/ftplugin/tex.vim'. You will find example definitions in the file
'latex-support/rc/tex.vim'.

==============================================================================
3.  TEMPLATES                                         *latexsupport-templates*
==============================================================================

Most of the menu entries insert templates into the current text. Most
templates come with their own map, for fast and convenient access. All maps
start with a mapleader, which can be set to a different value for use within
LaTeX Support (see |g:Latex_MapLeader|).

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  -various templates-        (automatically generated)      <LocalLeader>...
 ----------------------------------------------------------------------------

The following sections provide a short overview of the template system. See
the documentation of the template system for a more in-depth discussion:
|templatesupport.txt|, particularly |template-support-basics|

------------------------------------------------------------------------------
3.1  INTRODUCTION                        *latexsupport-templates-introduction*
------------------------------------------------------------------------------

This plug-in makes heavy use of an extendible template library. A template
library can assist in speeding up the writing of code, while at the same time
ensuring a consistent style. The templates are written in an easy to use
markup language, which enables the user to customize templates without much
hassle.

Templates are short pieces of text which can be included into source code or
text of any other kind. But they are not just plain text, they can be extended
with macros and tags to provide further convenience. Macros can be
automatically replaced with the date or the filename, or they can be replaced
with input from the user, for example the name of a new function.

While inserting a template, the user will often be asked to enter some
replacement text on the command line, for example the name of a function. The
replacement text will then be used in the template while it is inserted.
Hitting <ESC> or entering an empty text will abort template insertion.

------------------------------------------------------------------------------
3.2  JUMP TAGS                              *latexsupport-templates-jump-tags*
------------------------------------------------------------------------------

Templates can include special tags, which mark positions where text needs to
be added: >
  {+TAGNAME+} {-TAGNAME-}
  <+TAGNAME+> <-TAGNAME->
  [+TAGNAME+] [-TAGNAME-]
<
  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  jump to next tag           -                              <CTRL-J>
  delete optional tag        -                              <CTRL-D>
 ----------------------------------------------------------------------------

Use the <CTRL-J> to jump to the next tag. The maps works in normal and insert
mode. Use <CTRL-D> to delete optional tags on the same line, for example: >
  string.match ( <+str+>, <+pattern+>, [+init+] )
The optional argument "init" can be written down after jumping to the tag
using <CTRL-J> or deleted together with the comma using <CTRL-D>.

------------------------------------------------------------------------------
3.3  SPLIT TAGS                            *latexsupport-templates-split-tags*
------------------------------------------------------------------------------

Some templates include so-called split tags and therefore can use to surround
some lines of code, or to surround a part of the current line.

Example:

Consider the formula:
>
  $ c = a + b $
<
The template "Math.frac" contains a split tag for the nominator. After
selecting "a + b" and inserting the template, the result looks like this:
>
  $ c = \frac{a + b}{<+denominator+>} $
<
The cursor is placed within the first pair of brackets, use <CTRL-J> to jump
to the denominator.

------------------------------------------------------------------------------
3.4  MACROS                                    *latexsupport-templates-macros*
------------------------------------------------------------------------------

Macros are placeholder which get replace while a template is inserted. The
template library defines several macros used for personalization:
>
  SetMacro( 'AUTHOR',       'YOUR NAME' )
  SetMacro( 'AUTHORREF',    '' )
  SetMacro( 'EMAIL',        '' )
  SetMacro( 'ORGANIZATION', '' )
  SetMacro( 'COMPANY',      '' )
  SetMacro( 'COPYRIGHT',    'Copyright (c) |YEAR|, |AUTHOR|' )
  SetMacro( 'LICENSE',      'GNU General Public License' )
<
These macros are used by some templates, e.g. the file prolog. Arbitrary
user-defined macros are possible. The macro name must follows the rules for a
C language identifier: first character letter or underscore; case matters;
digits are allowed beginning with the second character.
>
Some predefined macros can help make comments much richer:
>
  |BASENAME|        filename without path and suffix
  |FILENAME|        filename without path
  |PATH|            path without filename
  |SUFFIX|          filename suffix

  |DATE|            the date
  |TIME|            the time
  |YEAR|            the year
<
The date and time formats can be set in the template library, see |strftime()|
for the format specifiers:
>
  SetFormat( 'DATE', '%D'      )
  SetFormat( 'TIME', '%H:%M'   )
  SetFormat( 'YEAR', 'year %Y' )
<
------------------------------------------------------------------------------
3.5  TEMPLATE FILES                             *latexsupport-templates-files*
------------------------------------------------------------------------------

Template files can include several further files: >
  IncludeFile( 'comments.templates' )
An included file will be processed before the remainder of the including file.

The template behind a menu item is identified by a given name. The first part
of the name identifies the menu name, the second part identifies the item.
A template definition starts with a template header with the following syntax:

  == menu_name.template_name == options ==

The options are described here: |template-support-options|

------------------------------------------------------------------------------
3.6  TEMPLATE LIBRARIES                          *latexsupport-templates-libs*
------------------------------------------------------------------------------

The template system comes with several auxiliary functions.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  edit the global template   Snippets.edit global templates <LocalLeader>ntg
    library (^1)
  edit the local template    Snippets.edit local templates  <LocalLeader>ntl
    library
  edit the custom template   Snippets.edit custom templates <LocalLeader>ntc
    library
  edit the personal templ.   Snippets.edit personal templ.  <LocalLeader>ntp
    library
  reread the templates       Snippets.reread templates      <LocalLeader>ntr
  setup wizard               Snippets.template setup wizard <LocalLeader>ntw
  choose a style             Snippets.choose style          <LocalLeader>nts
 ----------------------------------------------------------------------------

(^1) system-wide installation only

The menu items "Snippets->edit ... templates" open various template files. The
stock templates are usually located in the "local" template file: >
  ~/.vim/latex-support/templates/Templates
The template files named "custom" and "personal" can be used for
customization, which avoids editing the stock templates.
There may be dependent files loaded from the main files. Change whatever file
you want, save it, and click on the menu item "reread templates" to read in
the file(s) and to rebuild the internal representation of the templates.

For how to use these files to configure and personalize the template library,
see |luasupport-config-template-cstm|.

For help with setting up the template library, use the setup wizard
"Snippets -> template setup wizard".

Template Style
--------------
The template system supports different template styles. If there are more than
one style the menu item 'choose style' let you choose a style on the fly.

Template Browser
----------------
When editing a template file, it is selected via |:Explore|. You can change
this behavior by setting a global variable in your ~/.vimrc (see
|g:Templates_TemplateBrowser|):
>
  let g:Templates_TemplateBrowser = 'browse'
<
==============================================================================
4.  CUSTOMIZATION                                 *latexsupport-customization*
==============================================================================

------------------------------------------------------------------------------
4.1  FILES                                         *latexsupport-custom-files*
------------------------------------------------------------------------------

README.md                         The starting point.

autoload/mmtemplates/core         The template system plug-in.

doc/latexsupport.txt              The latex-support help file for the local help.
doc/templatesupport.txt           The template system help file for the local help.

plugin/latex-support.vim          The LaTeX plug-in for Vim/gVim.

latex-support/codesnippets/       The code snippets directory.

latex-support/templates/*         The template files.


latex-support/wordlists/latex-keywords.list  A file used as dictionary for
                                  automatic word completion.  This file is referenced
                                  in the file customization.vimrc.

---------------   -------------------------------------------------------------
---------------   The following files and extensions are for convenience only.
                  latex-support.vim will work without them.
                  -------------------------------------------------------------

latex-support/rc/make.vim               Additional filetype plug-in.
latex-support/rc/tex.vim                Additional filetype plug-in.
latex-support/rc/customization.ctags    Additional settings I use in ~.ctags.
latex-support/rc/customization.gvimrc   Additional settings I use in ~.gvimrc.
latex-support/rc/customization.vimrc    Additional settings I use in ~.vimrc:
                                        incremental search, tabstop, hot keys, font,
                                        use of dictionaries, ... The file is commented.
                                        Append it to your .vimrc if you like.
latex-support/doc/latex-hotkeys.pdf     Reference card for the key mappings.
                                        The mappings can also be used with the non-GUI Vim,
                                        where the menus are not available.
latex-support/doc/ChangeLog             The change log.

------------------------------------------------------------------------------
4.2  GLOBAL VARIABLES                          *latexsupport-custom-variables*
------------------------------------------------------------------------------

Several global variables are checked after the plug-in has been loaded to customize it:

------------------------------------------------------------------------------
 global variable                default value
------------------------------------------------------------------------------

 -- Linux/Unix ---------------------------------------------------------------
 g:Latex_Latex       'latex    -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Tex         'tex      -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Pdflatex    'pdflatex -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Pdftex      'pdftex   -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Lualatex    'lualatex --file-line-error --interaction=nonstopmode'
 g:Latex_Luatex      'luatex   --file-line-error --interaction=nonstopmode'
 g:Latex_Bibtex      "bibtex"

 g:Latex_DviViewer   "xdvi"
 g:Latex_PsViewer    "gv"
 g:Latex_PdfViewer   "acroread"

 g:Latex_DviPdf      'dvipdft'
 g:Latex_DviPng      'dvipng'
 g:Latex_DviPs       'dvips'
 g:Latex_PdfPng      'convert'
 g:Latex_PsPdf       'ps2pdf'

 g:Latex_CustomTemplateFile     $HOME.'/.vim/templates/latex.templates'
 g:Latex_GlobalTemplateFile     $VIMRUNTIME.'/latex-support/templates/Templates'
 g:Latex_LocalTemplateFile      $HOME.'/.vim/latex-support/templates/Templates'

 -- MS Windows ---------------------------------------------------------------
 g:Latex_Latex       'latex.exe    -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Tex         'tex.exe      -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Pdflatex    'pdflatex.exe -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_Bibtex      'bibtex.exe'

 g:Latex_Pdftex      'pdftex.exe   -src-specials -file-line-error -interaction=nonstopmode'
 g:Latex_DviViewer   'dviout.exe'
 g:Latex_PsViewer    ''
 g:Latex_PdfViewer   ''

 g:Latex_DviPdf      'dvipdfm.exe'
 g:Latex_DviPng      'dvipng.exe'
 g:Latex_DviPs       'dvips.exe'
 g:Latex_PdfPng      ''
 g:Latex_PsPdf       'ps2pdf.exe'

 g:Latex_CustomTemplateFile     $HOME.'/vimfiles/templates/latex.templates'
 g:Latex_GlobalTemplateFile     $VIMRUNTIME.'/latex-support/templates/Templates'
 g:Latex_LocalTemplateFile      $HOME.'/vimfiles/latex-support/templates/Templates'

 -- all ----------------------------------------------------------------------
 g:Latex_CodeSnippets           root_dir.'latex-support/codesnippets/'
 g:Latex_CreateMenusDelayed     'yes'
 g:Latex_Dictionary_File        ''
 g:Latex_GuiSnippetBrowser      'gui'
 g:Latex_InsertFileProlog       'yes'
 g:Latex_Ctrl_j                 'yes'
 g:Latex_Ctrl_d                 'yes'
 g:Latex_LineEndCommColDefault  49
 g:Latex_LoadMenus              'yes'
 g:Latex_MapLeader              'Â´'
 g:Latex_Printheader            "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"
 g:Latex_RootMenu               'LaTe&X'
 g:Latex_TexFlavor              'latex'
 g:Latex_Typesetter             'pdflatex'
 g:Latex_Processing             'foreground'

The variable root_dir will automatically be set to one of the following values:
  $HOME.'/.vim/'        for Linux/Unix
  $VIM.'/vimfiles/'     for MS-Windows

------------------------------------------------------------------------------
  DESCRIPTION
------------------------------------------------------------------------------
 *g:Latex_Latex*
The command line used to call the LaTeX typesetter.

 *g:Latex_Tex*
The command line used to call the TeX typesetter.

 *g:Latex_Pdflatex*
The command line used to call the pdfLaTeX typesetter.

 *g:Latex_Pdftex*
The command line used to call the pdfTeX typesetter.

 *g:Latex_Lualatex*
The command line used to call the luaLaTeX typesetter.

 *g:Latex_Luatex*
The command line used to call the luaTeX typesetter.

 *g:Latex_Bibtex*
The command line used to call bibtex.

 *g:Latex_DviViewer*
The command line used to call a DVi viewer.

 *g:Latex_PsViewer*
The command line used to call a PS viewer.

 *g:Latex_PdfViewer*
The command line used to call a PDF viewer.

 *g:Latex_DviPdf*
The command line used to call a DVI to PDF converter.

 *g:Latex_DviPng*
The command line used to call a DVI to Png converter.

 *g:Latex_DviPs*
The command line used to call a DVI to PS converter.

 *g:Latex_PdfPng*
The command line used to call a PDF to Png converter.

 *g:Latex_PsPdf*
The command line used to call a PS to PDF converter.

 *g:Latex_CodeSnippets*
The name of the (non-standard) code snippet directory (see below).

 *g:Latex_CreateMenusDelayed*
Delaying the initialization until the first TeX/LaTeX file is opened.

 *g:Latex_CustomTemplateFile*
Sets the custom template file, path+name, used to overwrite stock templates
(see|latexsupport-templates|).

 *g:Latex_Dictionary_File*
Path and filename of the LaTeX word list used for dictionary completion.

 *g:Latex_GlobalTemplateFile*
Sets the global template file, path+name  (see|latexsupport-templates|).

 *g:Latex_GuiSnippetBrowser*
Code snippet browser: 'gui', 'commandline'.

 |g:Latex_InsertFileProlog|
Insert file description comment in a new file ('yes', 'no').

*g:Latex_Ctrl_j* *g:Latex_Ctrl_d*
Create maps Ctrl-J and Ctrl-D ('yes', 'no')
(compare |latexsupport-templates-jump-tags|)

 *g:Latex_LineEndCommColDefault*
Default starting column for line-end comments.

 *g:Latex_LoadMenus*
Load menus and mappings ("yes", "no") at startup.

 *g:Latex_LocalTemplateFile*
Sets the local template file, path+name  (see|latexsupport-templates|).

 *g:Latex_MapLeader*
Map leader for hotkeys (|latexsupport-mappings|).

The mapleader can also be used in the ftplugin, by calling the functions
*Latex_SetMapLeader()* and *Latex_ResetMapLeader()* . The maps created between
the two calls will use |g:Latex_MapLeader| as the |<LocalLeader>|:
>
  call Latex_SetMapLeader ()

  map  <buffer>  <LocalLeader>eg  :echo "Example Map :)"<CR>

  call Latex_ResetMapLeader ()
<

 *g:Latex_Printheader*
Hardcopy header format.

 *g:Latex_RootMenu*
The name of the plug-in root menu.

 *g:Latex_TexFlavor*
The filetype when starting with an empty file ('latex', 'plaintex') 

 *g:Latex_Typesetter*
The typesetter used by the run command ('<mapleader>rr', or menu item):
'pdflatex', 'pdftex', 'latex', or 'tex'.

 *g:Latex_Processing*
The way external programs such as the typesetter are run:
'foreground' blocks the editor until the external process is done.
'background' runs the process asynchronously and displays a message once it is
done. Requires the |+job| feature.

------------------------------------------------------------------------------
4.3  THE ROOT MENU                                  *latexsupport-custom-root*
------------------------------------------------------------------------------

The root menu is not visible by default.  The root menu 'LaTeX' will appear
after the first file with extension 'tex' has been opened.
When the root menu is visible all templates have been loaded and the internal
data structures are built.  On a slow computer this may cause a noticeable
delay when starting the editor.  Therefor loading the templates is delayed to
the point where the first TeX/LaTeX file will be loaded.
To load the menu anyway when the editor starts add the following line to
~/.vimrc :
>
  let g:Latex_CreateMenusDelayed = 'no'
<
The variable g:Latex_RootMenu, if set in .vimrc or in .gvimrc, gives the name of
the single gVim root menu item in which the LaTeX submenus are contained. The
default is
>
                  'LaTe&X'
<
If you want to set the plug-in root menu as a submenu into another menu, e.g.
your own with the name 'Plugin', this is done by the following line in
'.vimrc'
>
  let g:Latex_RootMenu = '&Plugin.LaTe&X'
<
The appearance of the root menu item can also be controlled by the global
variable g:Latex_LoadMenus. The line
>
  let g:Latex_LoadMenus    = 'no'
<
prevents the root menu item from appearing when the editor starts. You can
switch it on (and off again) from the tools menu. The default for this
variable is 'yes'.

------------------------------------------------------------------------------
4.4  System-wide installation                       *latexsupport-system-wide*
------------------------------------------------------------------------------

A system-wide installation (one installation for all users) is done as
follows.

As *** SUPERUSER *** :

(1) Find the Vim installation directory.
The Vim ex command ':echo $VIM' gives '/usr/local/share/vim' or something like
that. Beyond this directory you will find the Vim installation,  e.g. in
'/usr/local/share/vim/vim73' if Vim version 7.3 has been installed (Windows:
'C:\Program Files\Vim').

(2) Create a new subdirectory 'vimfiles', e.g. '/usr/local/share/vim/vimfiles'
(Windows: 'C:\Program Files\Vim\vimfiles').

(3) Install LaTeX Support
Copy the archive latex-support.zip to this new directory and unpack it:
>
  unzip latex-support.zip
<
(4) Generate the help tags:
>
  :helptags $VIM/vimfiles/doc
<
SPECIAL CASES. Some Linux distributions use non-standard names for Vim
directories. SUSE has a directory '/usr/share/vim/site' to put plug-ins in.
These directories will not be found automatically.  After installing the
plug-in below '/usr/share/vim/site' the use of the templates will be enabled by
the following line in '~/.vimrc':
>
  let g:Latex_GlobalTemplateFile = '/usr/share/vim/site/latex-support/templates/Templates'
<

As *** USER *** :

Use the template setup wizard:
  LaTeX -> Snippets -> template setup wizard
to create a personalization file and/or a custom template file.

The personalization file will be read by all plug-ins supporting this feature,
and should contain only information relevant for all template libraries. You
can set some macros in this file with your personal information in order to
obtain personalized comments, e.g. something like this:
>
 SetMacro( 'AUTHOR',      'Dr. Fritz Mehner' )
 SetMacro( 'AUTHORREF',   'fgm' )
 SetMacro( 'EMAIL',       'mehner.fritz@web.de' )
 SetMacro( 'COPYRIGHT',   'Copyright (c) |YEAR|, |AUTHOR|' )
<
Use the custom template file for LaTeX templates which override the global
templates or to add new ones.

The old system (before version 1.2), using a "local" template file, >
  ~/.vim/latex-support/templates
is still supported for backwards compatibility.
>
Create your private snippet directory: >
  mkdir --parents  ~/.vim/latex-support/codesnippets
You may want to copy the snippets comming with this plug-in (in
$VIM/vimfiles/latex-support/codesnippets) into the new directory or to set a
link to the global directory.

==============================================================================
5.  TEMPLATE FILES AND TAGS                           *latexsupport-old-templ*
==============================================================================

Nearly all menu items insert code snippets or comments. All of these are
contained within template files and can be changed by the user to meet their
requirements. The menu shortcuts (e.g. 'c' for the Comments menu) and the
menu item hotkeys (e.g. 'Â´ct' insert date and time) are also defined in the
templates.
The template engine comes as a separate plug-in contributed by Wolfgang Mehner.
This section is a short introduction to this template system. Please see
|templatesupport.txt| for more information.

The master template file is '$HOME/.vim/latex-support/templates/Templates' for
a user installation and  '$VIM/vimfiles/latex-support/templates/Templates' for
a system-wide installation (see |latexsupport-system-wide|).

The master template file can be edited itself to adapt the templates/menus to
the users need.  Alternatively, a custom template file can be added (see
|g:Latex_CustomTemplateFile|), which eliminates the need to edit stock
templates. The personalization (name, email, ..., date and time format) can be
done in a special personalization template file. It will be read by all
plug-ins which support this feature, so it should only contain basic
information not pertaining to a specific programming language. It can be set
up using a wizard, which is run by the map \ntw or the menu entry:
  LaTeX -> Snippets -> template setup wizard

Further template files can be added using the call: >
  call mmtemplates#config#Add ( 'latex', '<PATH>/some.templates', 'example', 'nte' )
The first parameter adds the file to your LaTeX templates, the second is the
path. The remaining two optional parameters specify the symbolic name for
these templates and the map to edit them. The map is '\nte' in this example,
if the standard mapleader is set.

------------------------------------------------------------------------------
5.1  TEMPLATE FILES                             *latexsupport-old-templ-files*
------------------------------------------------------------------------------

The master template file starts with various settings followed by templates
for single menu items or better by including other template files grouping the
templates according to the menu structure of this plug-in. The master file
usually looks like this:

Example:
>
 Â§ ==========================================================
 Â§  Settings
 Â§ ==========================================================

 SetMacro( 'AUTHOR',       'YOUR NAME' )
 SetMacro( 'AUTHORREF',    '' )
 SetMacro( 'EMAIL',        '' )
 SetMacro( 'ORGANIZATION', '' )
 SetMacro( 'COMPANY',      '' )
 SetMacro( 'COPYRIGHT',    'Copyright (c) |YEAR|, |AUTHOR|' )
 SetMacro( 'LICENSE',      'GNU General Public License' )

 Â§ =============================================================
 Â§  File Includes
 Â§ =============================================================

 MenuShortcut( 'Comments', 'c' )
 MenuShortcut( 'Text',     't' )
 MenuShortcut( 'Math',     'm' )
 MenuShortcut( 'Document', 'd' )
 MenuShortcut( 'BibTeX',   'b' )
 MenuShortcut( 'Wizard',   'w' )
 MenuShortcut( 'Help',     'h' )

 IncludeFile( 'comments.templates' )
 IncludeFile( 'text.templates' )
 IncludeFile( 'math.templates' )
 IncludeFile( 'document.templates' )
 IncludeFile( 'bibtex.templates' )
 IncludeFile( 'wizard.templates' )
<
Lines starting with a section sign (Â§) are comments. The section starting with
>
  SetMacro( 'AUTHOR',       'YOUR NAME' )
<
assigns values to predefined tags (macros). Arbitrary user-defined macros are
possible. The macro name must follows the rules for a C language identifier:
first character letter or underscore; case matters; digits are allowed
beginning with the second character.
Some of the macros assigned here are placeholders, they will be overwritten by
template files read later on, which contain the user's configuration.

The statement
>
  IncludeFile( 'comments.templates' )
<
includes the templates from the file 'comments.templates' (in the same
directory). An absolute path would also be possible. The statement
>
  MenuShortcut( 'Comments',      'c' )
<
sets 'c' as the shortcut for the Comments menu.

------------------------------------------------------------------------------
5.2  MACROS                                    *latexsupport-old-templ-macros*
------------------------------------------------------------------------------

The following macro names are predefined. The first group is used to
personalize templates.
>
 |BASENAME|        filename without path and suffix
 |DATE|            the preferred date representation for the current locale
                    without the time
 |FILENAME|        filename without path
 |PATH|            path without filename
 |SUFFIX|          filename suffix
 |TIME|            the preferred time representation for the current locale
                    without the date and the time zone or name or abbreviation
 |YEAR|            the year as a decimal number including the century
<
 ----------------------------------------------------------------------------
 PREDEFINED TAGS USED IN TEMPLATES
 ----------------------------------------------------------------------------
 <CURSOR>           The cursor position after insertion of a template.
 <+text+>,<-text->  See |latexsupport-old-templ-jumptags|.
 {+text+},{-text-}
 [+text+],[-text-]

 <SPLIT>            The split point when inserting in visual mode
                    (see|latexsupport-old-templ|)

A dependent template file can start with its own command section. There is no
need to have all user defined macros in the master file.

------------------------------------------------------------------------------

5.2.1  Formating Date and Time                   *latexsupport-old-templ-date*

The format for *|DATE|* ,*|TIME|* , and*|YEAR|* can be set by the user. The
defaults are:
>
  |DATE|        '%x'
  |TIME|        '%X'
  |YEAR|        '%Y'
<
See the manual page of the C function strftime() for the format.  The accepted
format depends on your system, thus this is not portable!  The maximum length
of the result is 80 characters.

User defined formats can be set using the following function calls in the
master template file is '$HOME/.vim/latex-support/templates/Templates',  e.g.
>
  SetFormat( 'DATE', '%D'      )
  SetFormat( 'TIME', '%H:%M'   )
  SetFormat( 'YEAR', 'year %Y' )

------------------------------------------------------------------------------
5.3  TEMPLATES                                  *latexsupport-old-templ-names*
------------------------------------------------------------------------------

------------------------------------------------------------------------------

5.3.1  Template definition                 *latexsupport-old-templ-definition*

The template behind a menu item is identified by a given name. The first part
of the name identifies the menu name, the second part identifies the item.
A template definition starts with a template header with the following syntax:

  == menu_name.template_name == options ==

The options are described here: |template-support-options|.

------------------------------------------------------------------------------

5.3.2  The jump tags <+text+> etc.           *latexsupport-old-templ-jumptags*

There are four jump tag types which can be used as jump targets in templates:

 <+text+>   Can be jumped to by hitting Ctrl-j.
 {+text+}   Same as <+text+>. Used in cases where indentation gives unwanted
            results with the first one.

 <-text->   Same as the two above. Will be removed if the template is used
 {-text-}   in visual mode.

 [+text+]   The "optional" tag. Serves as a jump tag, but can be deleted using
            Ctrl-d.
 [-text-]   Same as above, removed in visual mode.

The text inside the brackets is userdefined and can be empty. The text can be
composed from letters (uppercase and lowercase), digits, and underscores.
After the insertion of an template these jump targets will be highlighted.

------------------------------------------------------------------------------

5.3.3  Command Ctrl-j                                    *latexsupport-Ctrl-j*

Use the command Ctrl-j to jump to the next target. The target will be removed
and the mode will switched to insertion. Ctrl-j works in normal and in insert
mode.  The template for an if-else-statement can be written as follows:
>
  == Statements.if, else == map:sie, sc:i ==
  if <CURSOR>
    <SPLIT><-IF_PART->
  else
    <+ELSE_PART+>
  endif
<
The cursor will be set as shown. When the condition is specified a Ctrl-j let
you jump to the target <-IF PART-> and deletes it.  When the block is written
a Ctrl-j leads you to the else-part.  The target <+ELSE_PART+> disappears and
you can type on.

------------------------------------------------------------------------------
5.4  FILE SKELETONS                               *latexsupport-file-skeleton*
------------------------------------------------------------------------------
                                                    *g:Latex_InsertFileProlog*
If g:Latex_InsertFileProlog is set to "yes", a file skeleton is automatically
inserted into new LaTeX documents. The list of templates used to create this
skeleton is specified in the template library. For this purpose a property is
used, which can for example be set in the customization file
(see |latexsupport-templates|).

                                                 *Latex::FileSkeleton::Script*
The file skeleton is controlled via this properties, which can be set in one
of the template files:
>
  SetProperty ( 'Latex::FileSkeleton::Script', 'Comments.file prolog' )
<
This inserts only a comment box to document the file. To disable the insertion
completely, set the property to an empty string: >
  SetProperty ( 'Latex::FileSkeleton::Script', '' )
In general, this property is a semicolon-separated list of templates to be
inserted: >
  SetProperty ( 'Latex::FileSkeleton::Script', 'Comments.file prolog; ;Skeleton.packages; ;Skeleton.document' )
This will insert a file description, and two file skeleton templates, one with
"\usepackage" commands and one with a skeleton of the document environment. If
a space appears as an entry in the list, an empty line is inserted: >
  '...; ;...'
<
==============================================================================
6.  LATEX DICTIONARY                                 *latexsupport-dictionary*
==============================================================================

The file  latex-keywords.list  contains words used as dictionary for automatic
word completion.  This feature is enabled by default. The default word list is
>
  $HOME/.vim/latex-support/wordlists/latex-keywords.list
<
If you want to use an additional list MyLatex.List put the following line into
 .vimrc :
>
 let g:Latex_Dictionary_File = "$HOME/.vim/latex-support/wordlists/latex-keywords.list,".
                           \   "$HOME/any_of_my_directories/MyLatex.List"
<
The right side is a comma separated list of files. Note the point at the end
of the first line (string concatenation) and the backslash in front of the
second line (continuation line).
You can use Vim's dictionary feature CTRL-X, CTRL-K (and CTRL-P, CTRL-N).

==============================================================================
A.  OVERVIEW OF MAPPINGS                               *latexsupport-mappings*
==============================================================================

Almost all functionality is accessible using key mappings. These mappings are
also described in the reference card 'latex-support/doc/latex-hotkeys.pdf'.

All mappings are filetype specific; they are only defined for buffers with
filetype 'tex' to minimize conflicts with mappings from other plug-ins.
Furthermore, the mapleader can be changed using the setting |g:Latex_MapLeader|.

Some mappings can be used with a range (of lines). In normal mode >
  \cl
appends a end-of-line comment to the current line,  whereas >
  4\cl
appends end-of-line comments to the 4 lines starting with the current line.

Legend:  (i) insert mode, (n) normal mode, (v) visual mode
         [n] range

  -----------------------------------------------------------------
   Help
  -----------------------------------------------------------------
     Â´he        open an English dictionary for  (ni)
                the word under the cursor
     Â´ht        start texdoc                    (ni)
     Â´hp        displays plugin help            (ni)

  -----------------------------------------------------------------
   Comments
  -----------------------------------------------------------------
  [n]Â´cl        end-of-line comment             (niv)
  [n]Â´cj        adjust end-of-line comments     (niv)
     Â´cs        set end-of-line comment col.    (n)
  [n]Â´cc        toggle comment                  (niv)

     Â´cfr1      frame comment, type 1           (ni)
     Â´cfr2      frame comment, type 2           (ni)
     Â´cfr3      frame comment, type 3           (ni)
     Â´cp        file prolog                     (ni)

     Â´cm        plug-in macros                  (ni)
     Â´cd        date                            (ni)
     Â´ct        date & time                     (ni)

  -----------------------------------------------------------------
   Document
  -----------------------------------------------------------------
     Â´dc        document class                  (ni)
     Â´di        indices                         (ni)
     Â´dti       title                           (ni)
     Â´dbi       bibliography                    (ni)
     Â´dac       addcontentsline                 (ni)

     Â´dln       newlength                       (ni)
     Â´dls       setlength                       (ni)
     Â´dla       addtolength                     (ni)
     Â´dlp       print length                    (ni)
     Â´dlt       set length to                   (ni)

  -----------------------------------------------------------------
   Text
  -----------------------------------------------------------------
     Â´e         environment                     (niv)
     Â´to        organization                    (ni)
     Â´ts        section                         (ni)
     Â´tld       list environment, description   (ni)
     Â´tle       list environment, enumerate     (ni)
     Â´tli       list environment, itemize       (ni)
     Â´tll       list environment, list          (ni)
     Â´tlit      list environment, item          (ni)
     Â´tlil      list environment, item+labels   (ni)
     Â´tf        font style                      (niv)
     Â´tfs       font size                       (niv)
     Â´tq        quotes                          (niv)
     Â´tsp       spacing                         (ni)
     Â´tal       line alignment + spacing        (niv)
     Â´tac       accents                         (niv)
     Â´ttc       textcomp characters             (ni)

     Â´tbi       bibitem                         (ni)
     Â´tci       cite                            (ni)
     Â´tfo       footnote                        (ni)
     Â´tin       index                           (ni)
     Â´tla       label                           (ni)
     Â´tma       marginpar                       (ni)
     Â´tco       newcommand                      (ni)
     Â´tnc       nocite                          (ni)
     Â´tpa       pageref                         (ni)
     Â´tre       ref                             (ni)
     Â´tur       url                             (niv)

  -----------------------------------------------------------------
   Math
  -----------------------------------------------------------------
     Â´msp      spaces                           (ni)
     Â´mac      accents                          (ni)
     Â´mfs      font styles                      (ni)
     Â´md       delimiter                        (ni)
     Â´mf       functions                        (ni)
     Â´mgl      lowercase  greek                 (ni)
     Â´mgu      uppercase greek                  (ni)
     Â´mo       operators                        (ni)
     Â´mr       relations                        (ni)
     Â´mar      arrows                           (ni)

     Â´me       equation+label                   (niv)
     Â´mea      eqnarray+label                   (niv)

     Â´mca      cases                            (niv)
     Â´mch      choose                           (niv)
     Â´mfr      frac                             (niv)
     Â´mma      matrix                           (ni)
     Â´mnr      nth root                         (niv)
     Â´mon      operatorname                     (niv)
     Â´mov      overset                          (niv)
     Â´mpr      prod                             (niv)
     Â´msi      sideset                          (niv)
     Â´msq      sqrt                             (niv)
     Â´msu      sum                              (niv)
     Â´mun      underset                         (niv)

  -----------------------------------------------------------------
   Wizard
  -----------------------------------------------------------------
     Â´wll       lstlisting                      (niv)
     Â´wlil      lstinputlisting                 (ni)
     Â´wlin      lstinline                       (niv)
     Â´wls       lstset                          (ni)

     Â´wtt       table                           (niv)
     Â´wtf       table, floating                 (niv)
     Â´wtg       tabbing                         (ni)
     Â´wtr       tabular                         (ni)

     Â´wf        figure                          (ni)
     Â´wff       floatingfigure                  (ni)
     Â´wwf       wrapfigure                      (ni)

     Â´wbf       fbox                            (niv)
     Â´wbfr      framebox                        (niv)
     Â´wbm       mbox                            (niv)
     Â´wbmb      makebox                         (niv)
     Â´wmp       minipage                        (niv)
     Â´wbp       parbox                          (niv)

  -----------------------------------------------------------------
   Snippets
  -----------------------------------------------------------------
     Â´nr       read code snippet                (ni)
     Â´nw       write code snippet               (niv)
     Â´nv       view code snippet                (ni)
     Â´ne       edit code snippet                (ni)

     Â´ntg      edit global templates            (ni)
     Â´ntl      edit local templates             (ni)
     Â´ntc      edit custom templates            (ni)
     Â´ntp      edit personal templates          (ni)
     Â´ntr      reread templates                 (ni)
     Â´ntw      template setup wizard            (ni)
     Â´nts      choose style                     (ni)

  -----------------------------------------------------------------
   Run
  -----------------------------------------------------------------
     Â´rr        save + run typesetter           (ni)
     Â´rla       save + run lacheck              (ni)
     Â´rmd       set main document               (ni)
     Â´re        view errors from bg. process    (ni)
     Â´rdvi      view DVI                        (ni)
     Â´rpdf      view PDF                        (ni)
     Â´rps       view PS                         (ni)
     Â´rc        run a converter                 (ni)
     Â´rmg       run makeglossaries              (ni)
     Â´rmi       run makeindex                   (ni)
     Â´rbi       run bibtex                      (ni)
     Â´rt        choose the typesetter           (ni)
     Â´rp        method for external processing  (ni)
     Â´rh        hardcopy buffer to postscript   (niv)
     Â´rs        show plugin settings            (ni)

  -----------------------------------------------------------------
   Tool Box
  -----------------------------------------------------------------
     Â´rm        run make                        (ni)
     Â´rmc       run make clean                  (ni)
     Â´rma       command line arguments for make (ni)
     Â´rcm       choose make file                (ni)

==============================================================================
B.  TROUBLESHOOTING - KNOWN ISSUES              *latexsupport-troubleshooting*
==============================================================================

* Some menus, such as "LaTeX -> Math -> greek lowercase" are not displayed
  correctly.
  - The character encoding used inside Vim is controlled by the option
    |'encoding'| (the encoding of files can be different, see |'fileencoding'|).
    It can be set by adding this lines to your '$HOME/.vimrc':
      :set encoding=utf-8
    Create one if there is none, or better use customization.vimrc.

==============================================================================
C.  RELEASE NOTES - CHANGE LOG                    *latexsupport-release-notes*
==============================================================================

See files 'latex-support/README.md' and 'latex-support/doc/ChangeLog'.

==============================================================================
vim:tw=78:expandtab:ts=2:ft=help:norl:
